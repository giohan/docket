#!/usr/bin/python


# (c) 2016, George Hantzaras <ghantzaras@gmail.com>
#
# This file is part of Docket
#
# Docket is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Docket is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Docket.  If not, see <http://www.gnu.org/licenses/>.

########################################################

import argparse
import importlib
import lib.docker as docker
import lib.monitoring as monitor
import lib.containers as containers
try:
    importlib.import_module('termcolor')
except ImportError:
    import pip
    pip.main(['install', 'termcolor'])
finally:
    globals()['termcolor'] = importlib.import_module('termcolor')


def main():

    parser = argparse.ArgumentParser(prog='docket')

    ######
    # Global arguments
    #######
    url_parse = argparse.ArgumentParser(add_help=False)
    url_parse.add_argument('-u','--url',help='The url where the docker daemon is running. Format: "http://<ip>:<port>"',
                        default='http:localhost:4243')

    #####
    # Creating parsers for each of the subcommands (build|containers|monitor|list|cleanup)
    #####
    sp = parser.add_subparsers()

    sp_build = sp.add_parser('build', help='Builds image and creates containers',
                             parents=[url_parse],
                             description='Build a docker image from given app and create a number of containers')
    sp_build.add_argument('-n','--num-instances', default=1,
                          help='Number of container instances to create after building the image')
    sp_build.add_argument('-i','--image-name',default='docket/app',
                          help='Name of the created image')
    sp_build.add_argument('-d','--directory',default='application/',
                          help='Directory of the application files. Path can be absolute or relative and must contain Dockerfile.')
    sp_build.add_argument('-c','--container-spec',default='config/container.spec',
                          help='JSON file containing parameters for creating the containers. \n Must be carefull with "Binds" in \
                          order to maintain centralized logging')
    sp_build.add_argument('--container-only',action='store_true',
                          default=False, help='Use this if you want to create containers from existing image')

    sp_containers = sp.add_parser('containers', help='Container operations',
                                  parents=[url_parse],
                                  description='Helps you start|stop|rm containers by ID')
    sp_containers.add_argument('--id',help='Id of the container you want to effect',
                               required=True)
    sp_containers.add_argument('action',choices=['start','stop','rm'],
                               help='The action to do on the specified container. For "rm" the container needs to be stopped.')


    sp_list = sp.add_parser('list',help='Returns a list of running containers',
                            parents=[url_parse],
                            description='Returns a list of running containers')
    sp_list.add_argument('--all',action='store_true',default=False,
                         help='List containers including not running')

    sp_monitor = sp.add_parser('monitor',help='Monitor running containers',
                               parents=[url_parse],
                               description='Creates a table with basic metrics for each container')
    sp_monitor.add_argument('--auto-update',action='store_true',default=False,
                            help='Makes the metrics table auto-update in a "top"-like manner')
    #####
    # End of subparsers
    #####

    # Deafult function calls for each subcommand
    sp_build.set_defaults(func=docker.build)
    sp_containers.set_defaults(func=containers.do_operations)
    sp_monitor.set_defaults(func=monitor.do_monitor)
    sp_list.set_defaults(func=docker.list)

    args = parser.parse_args()
    conf = vars(args)

    try:
        args.func(conf)
    except KeyboardInterrupt:
        print termcolor.colored('FAIL: Exited due to Keyboard Interrupt', 'red')


if __name__ == '__main__':
    main()
